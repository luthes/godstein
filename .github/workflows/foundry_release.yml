name: foundry-release-ci

permissions:
  contents: write

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # Get the version from the `module.json`
      - name: Get Version
        shell: bash
        id: get-version
        run: echo "MODULE_VERSION=$(cat ./src/module.json | jq -r .version)" >> $GITHUB_OUTPUT

      - name: Get Module ID
        shell: bash
        id: get-module-id
        run: echo "MODULE_ID=$(cat ./src/module.json | jq -r .id)" >> $GITHUB_OUTPUT

      - name: Verify Outputs
        run: echo "Module ID -  ${{ steps.get-module-id.outputs.module-id }} \n Module Verison - ${{ steps.get-module-id.outputs.module_version }}"

      - name: Create Zip Archive
        id: create-zip-archive
        shell: bash
        run: zip -r ./src/${{ steps.get-module-id.outputs.module_id }}.zip ./src/*

      - name: Create Release
        # Create an additional release for this version
        id: create_versioned_release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true # set to false if you do not want to allow updates on existing releases
          name: Release ${{ steps.get-module-id.outputs.module_id }} ${{ steps.get-version.outputs.module_version }}
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: './src/module.json,./${{ steps.get-module-id.outputs.module-id }}.zip'
          tag: ${{ steps.get-version.outputs.module_version }}

      - name: Create Release
        id: create_latest_release
        uses: ncipollo/release-action@v1
        if: endsWith(github.ref, 'main') # Only update the latest release when pushing to the main branch
        with:
          allowUpdates: true
          name: Latest
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: './module.json,./${{ steps.get-module-id.outputs.module-id }}.zip'
          tag: latest
